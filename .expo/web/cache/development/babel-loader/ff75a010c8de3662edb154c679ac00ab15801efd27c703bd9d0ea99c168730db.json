{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from \"./ExponentUpdates\";\nexport function reload() {\n  return _regeneratorRuntime.async(function reload$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(ExponentUpdates.reload());\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function reloadFromCache() {\n  return _regeneratorRuntime.async(function reloadFromCache$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ExponentUpdates.reloadFromCache());\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function checkForUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function checkForUpdateAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentUpdates.checkForUpdateAsync) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExponentUpdates.checkForUpdateAsync());\n        case 4:\n          result = _context3.sent;\n          if (result) {\n            _context3.next = 7;\n            break;\n          }\n          return _context3.abrupt(\"return\", {\n            isAvailable: false\n          });\n        case 7:\n          return _context3.abrupt(\"return\", {\n            isAvailable: true,\n            manifest: typeof result === 'string' ? JSON.parse(result) : result\n          });\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchUpdateAsync() {\n  var _ref,\n    eventListener,\n    subscription,\n    result,\n    _args4 = arguments;\n  return _regeneratorRuntime.async(function fetchUpdateAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;\n          if (ExponentUpdates.fetchUpdateAsync) {\n            _context4.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n        case 3:\n          if (eventListener && typeof eventListener === 'function') {\n            subscription = addListener(eventListener);\n          }\n          _context4.prev = 4;\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(ExponentUpdates.fetchUpdateAsync());\n        case 7:\n          result = _context4.sent;\n        case 8:\n          _context4.prev = 8;\n          subscription && subscription.remove();\n          return _context4.finish(8);\n        case 11:\n          if (result) {\n            _context4.next = 13;\n            break;\n          }\n          return _context4.abrupt(\"return\", {\n            isNew: false\n          });\n        case 13:\n          return _context4.abrupt(\"return\", {\n            isNew: true,\n            manifest: typeof result === 'string' ? JSON.parse(result) : result\n          });\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[4,, 8, 11]], Promise);\n}\nexport function clearUpdateCacheExperimentalAsync(abiVersion) {\n  return _regeneratorRuntime.async(function clearUpdateCacheExperimentalAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExponentUpdates.clearUpdateCacheAsync) {\n            _context5.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n        case 2:\n          return _context5.abrupt(\"return\", ExponentUpdates.clearUpdateCacheAsync(abiVersion));\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar _emitter;\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\nfunction _emitEvent(params) {\n  var newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"names":["RCTDeviceEventEmitter","UnavailabilityError","EventEmitter","ExponentUpdates","reload","_regeneratorRuntime","async","reload$","_context","prev","next","awrap","stop","Promise","reloadFromCache","reloadFromCache$","_context2","checkForUpdateAsync","result","checkForUpdateAsync$","_context3","sent","abrupt","isAvailable","manifest","JSON","parse","fetchUpdateAsync","_ref","eventListener","subscription","_args4","arguments","fetchUpdateAsync$","_context4","length","undefined","addListener","remove","finish","isNew","clearUpdateCacheExperimentalAsync","abiVersion","clearUpdateCacheExperimentalAsync$","_context5","clearUpdateCacheAsync","_emitter","_getEmitter","_emitEvent","params","newParams","manifestString","Error","emit","listener","emitter","EventType","DOWNLOAD_STARTED","DOWNLOAD_PROGRESS","DOWNLOAD_FINISHED","NO_UPDATE_AVAILABLE","ERROR"],"sources":["/Users/wesli/Documents/GitHub/stuport2/node_modules/expo/src/Updates/Updates.ts"],"sourcesContent":["import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function clearUpdateCacheExperimentalAsync(abiVersion: string): Promise<void> {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}