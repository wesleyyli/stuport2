{"ast":null,"code":"'use strict';\n\nimport ListViewDataSource from \"../ListView/ListViewDataSource\";\nvar SwipeableListViewDataSource = function () {\n  function SwipeableListViewDataSource(params) {\n    var _this = this;\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged\n    });\n  }\n  var _proto = SwipeableListViewDataSource.prototype;\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n    return this;\n  };\n  _proto.getDataSource = function getDataSource() {\n    return this._dataSource;\n  };\n  _proto.getOpenRowID = function getOpenRowID() {\n    return this._openRowID;\n  };\n  _proto.getFirstRowID = function getFirstRowID() {\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n    return Object.keys(this._dataBlob)[0];\n  };\n  _proto.getLastRowID = function getLastRowID() {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      var lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  };\n  _proto.setOpenRowID = function setOpenRowID(rowID) {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n    return this;\n  };\n  return SwipeableListViewDataSource;\n}();\nexport default SwipeableListViewDataSource;","map":{"version":3,"names":["ListViewDataSource","SwipeableListViewDataSource","params","_this","_dataSource","getRowData","getSectionHeaderData","rowHasChanged","row1","row2","id","_previousOpenRowID","_openRowID","sectionHeaderHasChanged","_proto","prototype","cloneWithRowsAndSections","dataBlob","sectionIdentities","rowIdentities","_dataBlob","getDataSource","getOpenRowID","getFirstRowID","Object","keys","getLastRowID","length","lastSection","setOpenRowID","rowID"],"sources":["/Users/wesli/Documents/GitHub/stuport2/node_modules/react-native-web/dist/vendor/react-native/SwipeableListView/SwipeableListViewDataSource.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule SwipeableListViewDataSource\n */\n'use strict';\n\nimport ListViewDataSource from '../ListView/ListViewDataSource';\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\n\nvar SwipeableListViewDataSource =\n/*#__PURE__*/\nfunction () {\n  function SwipeableListViewDataSource(params) {\n    var _this = this;\n\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged\n    });\n  }\n\n  var _proto = SwipeableListViewDataSource.prototype;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n    return this;\n  } // For the actual ListView to use\n  ;\n\n  _proto.getDataSource = function getDataSource() {\n    return this._dataSource;\n  };\n\n  _proto.getOpenRowID = function getOpenRowID() {\n    return this._openRowID;\n  };\n\n  _proto.getFirstRowID = function getFirstRowID() {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n\n    return Object.keys(this._dataBlob)[0];\n  };\n\n  _proto.getLastRowID = function getLastRowID() {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      var lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  };\n\n  _proto.setOpenRowID = function setOpenRowID(rowID) {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n    return this;\n  };\n\n  return SwipeableListViewDataSource;\n}();\n\nexport default SwipeableListViewDataSource;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}