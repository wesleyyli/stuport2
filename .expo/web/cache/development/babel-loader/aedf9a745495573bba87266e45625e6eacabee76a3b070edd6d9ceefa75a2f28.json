{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { StackActions, NavigationActions, SceneView } from 'react-navigation';\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    _classCallCheck(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n      if (descriptor) {\n        var _descriptor$options3 = descriptor.options,\n          gestureEnabled = _descriptor$options3.gestureEnabled,\n          animationEnabled = _descriptor$options3.animationEnabled;\n        if (animationEnabled === false) {\n          return false;\n        }\n        return gestureEnabled !== undefined ? gestureEnabled : Platform.OS !== 'android';\n      }\n      return false;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      var navigation = descriptor.navigation,\n        getComponent = descriptor.getComponent;\n      var SceneComponent = getComponent();\n      return React.createElement(SceneView, {\n        screenProps: _this.props.screenProps,\n        navigation: navigation,\n        component: SceneComponent\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionComplete\", function () {\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      if (state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key\n        }));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props3 = _this.props,\n        state = _this$props3.state,\n        navigation = _this$props3.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      _this.handleTransitionComplete();\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(NavigationActions.navigate(route));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref5) {\n      var route = _ref5.route;\n      var _this$props4 = _this.props,\n        state = _this$props4.state,\n        navigation = _this$props4.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(StackActions.pop({\n          key: route.key,\n          prune: false\n        }));\n      } else {\n        _this.handleTransitionComplete();\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref6, closing) {\n      var route = _ref6.route;\n      var _descriptor$options$o, _descriptor$options;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o = (_descriptor$options = descriptor.options).onTransitionStart) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options, {\n        closing: closing\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref7, closing) {\n      var route = _ref7.route;\n      var _descriptor$options$o2, _descriptor$options2;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o2 = (_descriptor$options2 = descriptor.options).onTransitionEnd) === null || _descriptor$options$o2 === void 0 ? void 0 : _descriptor$options$o2.call(_descriptor$options2, {\n        closing: closing\n      });\n    });\n    return _this;\n  }\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation,\n        keyboardHandlingEnabled = _this$props.keyboardHandlingEnabled,\n        _this$props$mode = _this$props.mode,\n        mode = _this$props$mode === void 0 ? 'card' : _this$props$mode,\n        _this$props$headerMod = _this$props.headerMode,\n        headerMode = _this$props$headerMod === void 0 ? mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen' : _this$props$headerMod,\n        _ = _this$props.descriptors,\n        rest = _objectWithoutProperties(_this$props, [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"]);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(React.Fragment, null, React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaConsumer, null, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(CardStack, _extends({\n            mode: mode,\n            insets: insets,\n            getPreviousRoute: _this2.getPreviousRoute,\n            getGesturesEnabled: _this2.getGesturesEnabled,\n            routes: routes,\n            openingRouteKeys: openingRouteKeys,\n            closingRouteKeys: closingRouteKeys,\n            onOpenRoute: _this2.handleOpenRoute,\n            onCloseRoute: _this2.handleCloseRoute,\n            onTransitionStart: _this2.handleTransitionStart,\n            onTransitionEnd: _this2.handleTransitionEnd,\n            renderHeader: _this2.renderHeader,\n            renderScene: _this2.renderScene,\n            headerMode: headerMode,\n            state: state,\n            descriptors: descriptors\n          }, rest, props));\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref8) {\n          var key = _ref8.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","StackActions","NavigationActions","SceneView","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","_ref","route","descriptor","state","key","_descriptor$options3","options","gestureEnabled","animationEnabled","undefined","OS","_ref2","_this$state","filter","r","includes","findIndex","_ref3","props","navigation","getComponent","SceneComponent","createElement","screenProps","component","_this$props2","isTransitioning","dispatch","completeTransition","toChildKey","_ref4","_this$props3","_this$state2","handleTransitionComplete","some","navigate","setState","_ref5","_this$props4","pop","prune","_ref6","closing","_descriptor$options$o","_descriptor$options","onTransitionStart","_ref7","_descriptor$options$o2","_descriptor$options2","onTransitionEnd","_createClass","value","render","_this2","_this$props","keyboardHandlingEnabled","_this$props$mode","mode","_this$props$headerMod","headerMode","_","rest","_objectWithoutProperties","_this$state3","Fragment","style","styles","container","insets","enabled","_extends","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","_toConsumableArray","splice","_routes2","_ref8","Error","Component","default","create","flex"],"sources":["/Users/wesli/Documents/GitHub/stuport2/node_modules/react-navigation-stack/lib/module/vendor/views/Stack/StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  NavigationActions,\n  SceneView,\n} from 'react-navigation';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    this.handleTransitionComplete();\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch(NavigationActions.navigate(route));\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <CardStack\n                      mode={mode}\n                      insets={insets as EdgeInsets}\n                      getPreviousRoute={this.getPreviousRoute}\n                      getGesturesEnabled={this.getGesturesEnabled}\n                      routes={routes}\n                      openingRouteKeys={openingRouteKeys}\n                      closingRouteKeys={closingRouteKeys}\n                      onOpenRoute={this.handleOpenRoute}\n                      onCloseRoute={this.handleCloseRoute}\n                      onTransitionStart={this.handleTransitionStart}\n                      onTransitionEnd={this.handleTransitionEnd}\n                      renderHeader={this.renderHeader}\n                      renderScene={this.renderScene}\n                      headerMode={headerMode}\n                      state={state}\n                      descriptors={descriptors}\n                      {...rest}\n                      {...props}\n                    />\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}